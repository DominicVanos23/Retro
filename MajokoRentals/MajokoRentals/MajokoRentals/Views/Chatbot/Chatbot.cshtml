@{
    ViewData["Title"] = "MajokoRentals Chatbot";
}

<style>
    :root {
        --bg-1: #0E1327;
        --bg-2: #151A2C;
        --panel: #ffffff22;
        --panel-2: #ffffff10;
        --brand: #BAAA49;
        --text: #fff;
        --text-dim: #D7D9E1;
        --border: #ffffff2a;
        --shadow: 0 18px 40px rgba(0,0,0,.45);
        --radius: 16px;
        --ring: 0 0 0 3px rgba(186,170,73,.35);
        --bot: #252B4A;
        --user: #e4d46d;
        --user-2: #BAAA49;
    }

    html, body {
        background: radial-gradient(1200px 600px at 10% -10%, #20306655 0%, transparent 60%), radial-gradient(900px 500px at 110% 10%, #3a2f0b33 0%, transparent 55%), linear-gradient(180deg, var(--bg-1), var(--bg-2));
        color: var(--text);
        font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial;
        margin: 0;
        min-height: 100vh;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

        /* decorative grid */
        body::before {
            content: "";
            position: fixed;
            inset: 0;
            pointer-events: none;
            background-image: linear-gradient(to right,#ffffff08 1px,transparent 1px), linear-gradient(to bottom,#ffffff08 1px,transparent 1px);
            background-size: 40px 40px;
            mask-image: radial-gradient(circle at 50% 30%, black 30%, transparent 70%);
        }

    .page {
        max-width: 980px;
        margin: 48px auto;
        padding: 0 16px;
    }

    .chat {
        height: 76vh;
        min-height: 600px;
        display: grid;
        grid-template-rows: auto 1fr auto;
        border-radius: var(--radius);
        background: linear-gradient(180deg, var(--panel), var(--panel-2));
        -webkit-backdrop-filter: blur(14px) saturate(140%);
        backdrop-filter: blur(14px) saturate(140%);
        border: 1px solid var(--border);
        box-shadow: var(--shadow);
        overflow: hidden;
    }

    /* header */
    .chat__header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 14px;
        border-bottom: 1px solid var(--border);
        background: linear-gradient(180deg, #0b102255, transparent);
    }

    .brand {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .brand__logo {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        overflow: hidden;
        background: #0b1022;
        border: 1px solid var(--border);
        display: grid;
        place-items: center;
    }

        .brand__logo img {
            width: 80%;
            height: auto;
        }

    .brand__text {
        line-height: 1.1;
    }

    .brand__title {
        margin: 0;
        font-weight: 800;
        color: var(--brand);
    }

    .brand__sub {
        margin: 0;
        font-size: 12px;
        color: var(--text-dim);
    }

    .status-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: #36d399;
        display: inline-block;
        box-shadow: 0 0 0 3px #36d39933;
        margin-right: 6px;
    }

    .chat__tools {
        display: flex;
        gap: 8px;
    }

    .tool {
        border: 1px solid var(--border);
        border-radius: 10px;
        background: linear-gradient(180deg, #ffffff22, #ffffff12);
        color: #fff;
        padding: 8px 10px;
        cursor: pointer;
        transition: transform .15s ease, box-shadow .2s ease;
    }

        .tool:hover {
            transform: translateY(-1px);
            box-shadow: 0 8px 18px rgba(0,0,0,.35);
        }

    /* messages area */
    .chat__scroll {
        overflow: auto;
        padding: 16px 14px 8px;
    }
        /* pretty scrollbars */
        .chat__scroll::-webkit-scrollbar {
            width: 10px;
        }

        .chat__scroll::-webkit-scrollbar-thumb {
            background: #ffffff33;
            border-radius: 10px;
            border: 2px solid transparent;
            background-clip: content-box;
        }

    .msg {
        display: flex;
        gap: 10px;
        margin: 10px 0;
        max-width: 78%;
    }

    .msg--bot {
        align-items: flex-start;
    }

    .msg--user {
        margin-left: auto;
        flex-direction: row-reverse;
    }

    .avatar {
        width: 34px;
        height: 34px;
        border-radius: 50%;
        background: #0b1022;
        border: 1px solid var(--border);
        display: grid;
        place-items: center;
        flex: 0 0 auto;
    }

    .avatar--bot {
        background: #1f2647;
    }

    .avatar img {
        width: 70%;
        height: auto;
    }

    .bubble {
        padding: 10px 14px;
        border-radius: 14px;
        border: 1px solid var(--border);
        background: linear-gradient(180deg, #ffffff20, #ffffff0d);
        color: #fff;
        position: relative;
        box-shadow: 0 6px 16px rgba(0,0,0,.28);
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    .msg--bot .bubble {
        background: linear-gradient(180deg, #ffffff22, #ffffff10);
    }

    .msg--user .bubble {
        color: #121629;
        background: linear-gradient(180deg, var(--user), var(--user-2));
        border-color: #00000022;
        font-weight: 600;
    }

    .meta {
        margin-top: 4px;
        font-size: 11px;
        color: #cfd3e6aa;
    }

    /* typing indicator */
    .typing {
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 6px 0 12px;
        color: var(--brand);
        font-style: italic;
    }

    .dots {
        display: inline-flex;
        gap: 3px;
    }

        .dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: var(--brand);
            opacity: .5;
            animation: blink 1.2s infinite;
        }

            .dots span:nth-child(2) {
                animation-delay: .2s;
            }

            .dots span:nth-child(3) {
                animation-delay: .4s;
            }
    @@keyframes blink {
        0%,80%,100%

    {
        opacity: .2
    }

    40% {
        opacity: 1
    }

    }

    /* quick suggestions */
    .suggest {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
        margin: 4px 0 12px;
    }

    .chip {
        border: 1px solid var(--border);
        border-radius: 999px;
        background: linear-gradient(180deg, #ffffff1f, #ffffff10);
        color: #fff;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 14px;
        transition: transform .15s ease, box-shadow .2s ease;
    }

        .chip:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 14px rgba(0,0,0,.28);
        }

    /* input area */
    .chat__input {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 10px;
        padding: 12px;
        border-top: 1px solid var(--border);
        background: linear-gradient(0deg, #0b102255, transparent);
    }

    .editor {
        display: flex;
        gap: 10px;
        align-items: flex-end;
        border: 1px solid var(--border);
        border-radius: 14px;
        padding: 10px;
        background: linear-gradient(180deg, #0b0f2233, #0b0f221a);
    }

    textarea {
        flex: 1;
        min-height: 42px;
        max-height: 140px;
        resize: none;
        border: none;
        outline: none;
        background: transparent;
        color: #fff;
        font: 15px/1.4 inherit;
    }

    .send {
        border: none;
        border-radius: 12px;
        padding: 10px 16px;
        cursor: pointer;
        background: linear-gradient(180deg, #e4d46d, #BAAA49);
        color: #121629;
        font-weight: 800;
        letter-spacing: .2px;
        box-shadow: 0 10px 24px rgba(186,170,73,.35);
        transition: transform .15s ease, box-shadow .2s ease, filter .2s ease;
    }

        .send:hover {
            transform: translateY(-1px);
            box-shadow: 0 18px 36px rgba(186,170,73,.45);
            filter: brightness(1.02);
        }

    /* mobile */
    @@media (max-width: 640px) {
        .msg

    {
        max-width: 92%;
    }

    .chat {
        height: 82vh;
    }

    }
</style>

<div class="page">
    <section class="chat" aria-label="MajokoBot chat">
        <!-- Header -->
        <header class="chat__header">
            <div class="brand">
                <div class="brand__logo"><img src="~/img/Mlogo.png" alt="Majoko Rentals" /></div>
                <div class="brand__text">
                    <h4 class="brand__title">MajokoBot</h4>
                    <div class="brand__sub"><span class="status-dot"></span>Online • Ask anything about rentals</div>
                </div>
            </div>
            <div class="chat__tools">
                <button class="tool" type="button" id="btnClear" title="Clear conversation">🧹 Clear</button>
                <a class="tool" href="/Home/Index" title="Back to home">🏠 Home</a>
            </div>
        </header>

        <!-- Scrollable messages -->
        <div class="chat__scroll" id="chatBox" role="log" aria-live="polite" aria-relevant="additions">
            <div class="msg msg--bot">
                <div class="avatar avatar--bot"><img src="~/img/Mlogo.png" alt="Bot" /></div>
                <div>
                    <div class="bubble">👋 Hi there! I’m MajokoBot. How can I help today?</div>
                    <div class="meta">Now</div>
                </div>
            </div>

            <!-- Quick suggestions -->
            <div class="suggest" id="suggestions">
                <button class="chip" data-say="Show available 2-bedroom listings.">Show available 2-bedroom listings.</button>
                <button class="chip" data-say="How do I apply and what docs are needed?">How do I apply and what docs are needed?</button>
                <button class="chip" data-say="When is the next viewing for Unit A-101?">When is the next viewing for Unit A-101?</button>
                <button class="chip" data-say="What’s the status of my application?">What’s the status of my application?</button>
            </div>
        </div>

        <!-- Typing -->
        <div id="typing" class="typing" style="display:none; padding: 0 14px 8px;">
            <span class="dots"><span></span><span></span><span></span></span> MajokoBot is typing…
        </div>

        <!-- Input -->
        <footer class="chat__input">
            <div class="editor">
                <textarea id="userInput" placeholder="Type your message… (Shift+Enter for new line)"></textarea>
            </div>
            <button id="sendBtn" class="send" type="button">Send</button>
        </footer>
    </section>
</div>

<script>
    const chatBox = document.getElementById('chatBox');
    const input = document.getElementById('userInput');
    const sendBtn = document.getElementById('sendBtn');
    const typing = document.getElementById('typing');
    const suggestions = document.getElementById('suggestions');
    const clearBtn = document.getElementById('btnClear');

    // Utilities
    const nowTime = () => new Date().toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});

    function appendMessage(text, from='user') {
        const wrap = document.createElement('div');
        wrap.className = `msg ${from === 'bot' ? 'msg--bot' : 'msg--user'}`;

        const avatar = document.createElement('div');
        avatar.className = 'avatar ' + (from === 'bot' ? 'avatar--bot' : 'avatar--user');
        if (from === 'bot') {
            const img = document.createElement('img');
            img.src = '@Url.Content("~/img/Mlogo.png")';
            img.alt = 'Bot';
            avatar.appendChild(img);
        } else {
            avatar.textContent = 'You';
        }

        const body = document.createElement('div');
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
        bubble.textContent = text; // safe textContent
        const meta = document.createElement('div');
        meta.className = 'meta';
        meta.textContent = nowTime();

        body.appendChild(bubble);
        body.appendChild(meta);

        wrap.appendChild(avatar);
        wrap.appendChild(body);
        chatBox.appendChild(wrap);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function setTyping(show){
        typing.style.display = show ? 'block' : 'none';
        if(show) chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Auto-grow textarea
    function autoGrow() {
        input.style.height = 'auto';
        input.style.height = Math.min(input.scrollHeight, 140) + 'px';
    }
    input.addEventListener('input', autoGrow);

    // Send handlers
    sendBtn.addEventListener('click', () => handleSend());
    input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    });

    // Suggestions
    suggestions?.addEventListener('click', (e) => {
        const chip = e.target.closest('[data-say]');
        if(!chip) return;
        input.value = chip.getAttribute('data-say');
        autoGrow();
        handleSend();
    });

    // Clear
    clearBtn?.addEventListener('click', () => {
        chatBox.innerHTML = `
            <div class="msg msg--bot">
                <div class="avatar avatar--bot"><img src="@Url.Content("~/img/Mlogo.png")" alt="Bot"/></div>
                <div>
                    <div class="bubble">Conversation cleared. How else can I help?</div>
                    <div class="meta">${nowTime()}</div>
                </div>
            </div>`;
        setTyping(false);
    });

    function handleSend() {
        const message = input.value.trim();
        if(!message) return;

        // hide suggestions after 1st interaction
        suggestions?.remove();

        appendMessage(message, 'user');
        input.value = ''; autoGrow(); setTyping(true);

        fetch('/Chatbot/SendMessage', {
            method: 'POST',
            headers: { 'Content-Type':'application/x-www-form-urlencoded' },
            body: 'message=' + encodeURIComponent(message)
        })
        .then(r => r.ok ? r.json() : Promise.reject())
        .then(data => {
            setTyping(false);
            const reply = (data && (data.reply ?? '').toString().trim()) || 'Sorry, I didn’t catch that.';
            appendMessage(reply, 'bot');
        })
        .catch(() => {
            setTyping(false);
            appendMessage('Sorry, something went wrong. Please try again.', 'bot');
        });
    }
</script>
